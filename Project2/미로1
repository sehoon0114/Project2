#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define ROWS 10
#define COLS 10

char maze[ROWS][COLS] = {
    {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
    {'e', '0', '0', '0', '1', '0', '0', '0', '0', '1'},
    {'1', '0', '1', '0', '1', '0', '1', '1', '0', '1'},
    {'1', '0', '1', '0', '1', '0', '0', '0', '0', '1'},
    {'1', '0', '1', '0', '1', '0', '1', '1', '0', '1'},
    {'1', '0', '1', '0', '1', '0', '1', '0', '0', '1'},
    {'1', '0', '1', '0', '1', '0', '1', '0', '1', '1'},
    {'1', '0', '0', '0', '1', '0', '0', '0', '1', '1'},
    {'1', '0', '1', '1', '1', '0', '1', '0', '0', 'X'},
    {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1'}
};

typedef struct {
    int row, col;
} position;

typedef struct {
    position pos;
    int dir;
} element;

element stack[ROWS * COLS];
int top = -1;

bool is_empty() {
    return top == -1;
}

bool is_full() {
    return top == ROWS * COLS - 1;
}

void push(element item) {
    if (is_full()) {
        printf("Stack is full. Cannot push element.\n");
        return;
    }

    stack[++top] = item;
}

element pop() {
    if (is_empty()) {
        printf("Stack is empty. Cannot pop element.\n");
        element err_item = { {-1, -1}, -1 };
        return err_item;
    }

    return stack[top--];
}

position get_next_position(position pos, int dir) {
    position next_pos = { pos.row, pos.col };

    switch (dir) {
    case 0: // up
        next_pos.row--;
        break;
    case 1: // right
        next_pos.col++;
        break;
    case 2: // down
        next_pos.row++;
        break;
    case 3: // left
        next_pos.col--;
        break;
    }

    return next_pos;
}

void print_maze() {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            printf("%c ", maze[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

void mark_visited(position pos) {
    maze[pos.row][pos.col] = '.';
}

bool is_valid_position(position pos) {
    if (pos.row < 0 || pos.col < 0 || pos.row >= ROWS || pos.col >= COLS) {
        return false; // position is out of bounds
    }
    if (maze[pos.row][pos.col] == '1' || maze[pos.row][pos.col] == '.') {
        return false; // position is a wall or has already been visited
    }
    return true;
    int main() {
        position start = { 1, 0 };
        position finish = { ROWS - 1, COLS - 1 };

        element start_elem = { start, -1 };
        push(start_elem);

        while (!is_empty()) {
            element curr_elem = pop();
            position curr_pos = curr_elem.pos;

            if (curr_pos.row == finish.row && curr_pos.col == finish.col) {
                printf("Found the finish.\n");
                break;
            }

            for (int dir = 0; dir < 4; dir++) {
                position next_pos = get_next_position(curr_pos, dir);

                if (is_valid_position(next_pos)) {
                    mark_visited(next_pos);
                    element next_elem = { next_pos, dir };
                    push(next_elem);
                }
            }
        }

        print_maze();

        return 0;
    }
